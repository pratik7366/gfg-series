Given a string s of lowercase English alphabets, your task is to return the maximum number of substrings formed, after possible partitions (probably zero) of s such that no two substrings have a common character.




// c++ code 

class Solution {
  public:
    int maxPartitions(string &s) {
    
    unordered_map<char, int> last_occurrence;
    for (int i = 0; i < s.size(); i++) {
        last_occurrence[s[i]] = i;
    }
    
    int partitions = 0, end = 0;
    for (int i = 0; i < s.size(); i++) {
        end = max(end, last_occurrence[s[i]]);
        if (i == end) {
            partitions++;
        }
    }
    return partitions;
        
    }
};
