
Given the head of a linked list, determine whether the list contains a loop. If a loop is present, return the number of nodes in the loop, otherwise return 0.

Note: 'c' is the position of the node which is the next pointer of the last node of the linkedlist. If c is 0, then there is no loop.





//c++ code 

class Solution {
  public:
    
       int countLoopLength(Node* meetingPoint) {
    Node* temp = meetingPoint;
    int count = 1;
    while (temp->next != meetingPoint) {
        count++;
        temp = temp->next;
    }
    return count;
}

int countNodesinLoop(Node* head) {
    Node* slow = head;
    Node* fast = head;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast)
            return countLoopLength(slow);
    }
    return 0;
}

Node* createLinkedListWithLoop(int arr[], int n, int c) {
    Node* head = new Node(arr[0]);
    Node* tail = head;
    Node* loopNode = nullptr;

    for (int i = 1; i < n; i++) {
        tail->next = new Node(arr[i]);
        tail = tail->next;
        if (i == c) loopNode = tail;
    }

    if (c != 0) {
        tail->next = loopNode;
    }

    return head;
        
    }
};
