You are given two arrays: deadline[], and profit[], which represent a set of jobs, where each job is associated with a deadline, and a profit. Each job takes 1 unit of time to complete, and only one job can be scheduled at a time. You will earn the profit associated with a job only if it is completed by its deadline.

Your task is to find:

The maximum number of jobs that can be completed within their deadlines.
The total maximum profit earned by completing those jobs.






// c++ code 


class Solution {
  public:
    vector<int> jobSequencing(vector<int> &deadline, vector<int> &profit) {
            int n = deadline.size();
    vector<pair<int, int>> jobs;
    for (int i = 0; i < n; i++) {
        jobs.push_back({deadline[i], profit[i]});
    }
    sort(jobs.begin(), jobs.end());
    priority_queue<int, vector<int>, greater<int>> pq;
    int curr = 0, maxProfit = 0;
    for (int i = 0; i < n; i++) {
        if (jobs[i].first > curr) {
            curr++;
            maxProfit += jobs[i].second;
            pq.push(jobs[i].second);
        } else if (!pq.empty() && jobs[i].second > pq.top()) {
            maxProfit -= pq.top();
            pq.pop();
            maxProfit += jobs[i].second;
            pq.push(jobs[i].second);
        }
    }
    return {curr, maxProfit};

        
    }
};
