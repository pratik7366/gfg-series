You are given an integer n representing the number of rooms numbered from 0 to n - 1. Additionally, you are given a 2D integer array meetings[][] where meetings[i] = [starti, endi] indicates that a meeting is scheduled during the half-closed time interval [starti, endi). All starti values are unique.






//c++ code 

class Solution {
  public:
    int mostBooked(int n, vector<vector<int>> &meetings) {
       
        sort(meetings.begin(), meetings.end());

        vector<int> count(n, 0);
        priority_queue<int, vector<int>, greater<int>> free;
        for (int i = 0; i < n; ++i) free.push(i);

        typedef pair<long long, int> P;
        priority_queue<P, vector<P>, greater<P>> busy;

        for (auto& m : meetings) {
            int start = m[0], end = m[1];

            while (!busy.empty() && busy.top().first <= start) {
                int room = busy.top().second;
                busy.pop();
                free.push(room);
            }

            if (!free.empty()) {
                int room = free.top(); free.pop();
                count[room]++;
                busy.push({end, room});
            } else {
                P top = busy.top(); busy.pop();
                long long newEnd = top.first + (end - start);
                int room = top.second;
                count[room]++;
                busy.push({newEnd, room});
            }
        }

        int maxRoom = 0;
        for (int i = 1; i < n; ++i) {
            if (count[i] > count[maxRoom]) {
                maxRoom = i;
            }
        }
        return maxRoom;
        
    }
};
