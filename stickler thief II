
You are given an array arr[] which represents houses arranged in a circle, where each house has a certain value. A thief aims to maximize the total stolen value without robbing two adjacent houses.
Determine the maximum amount the thief can steal.

Note: Since the houses are in a circle, the first and last houses are also considered adjacent.



//c++ code 

class Solution {
  public:
    
        int robLinear(vector<int>& nums) {
    int prev2 = 0, prev1 = 0;
    for (int num : nums) {
        int curr = max(prev1, prev2 + num);
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}

int maxValue(vector<int>& nums) {
    if (nums.size() == 1) return nums[0];
    vector<int> case1(nums.begin(), nums.end() - 1);
    vector<int> case2(nums.begin() + 1, nums.end());
    return max(robLinear(case1), robLinear(case2));
        
    }
};
