
Given two strings s1 and s2. Return a minimum number of times s1 has to be repeated such that s2 is a substring of it. If s2 can never be a substring then return -1.

Note: Both the strings contain only lowercase letters.


//c++ code
class Solution {
  public:
    int minRepeats(string& s1, string& s2) {
        
    int count = 1;
    string repeated = s1;
    while (repeated.size() < s2.size()) {
        repeated += s1;
        count++;
    }
    if (repeated.find(s2) != string::npos) return count;
    repeated += s1;
    if (repeated.find(s2) != string::npos) return count + 1;
    return -1;
    }
};
