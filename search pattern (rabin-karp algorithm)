
Given two strings:

A text string in which you want to search.

A pattern string that you are looking for within the text.

Return all positions (1-based indexing) where the pattern occurs as a substring in the text. If the pattern does not occur, return an empty list.

All characters in both strings are lowercase English letters (a to z).




//c++ code 

class Solution {
  public:
      vector<int> computeLPS(string &pat) {
        int m = pat.size();
        vector<int> lps(m, 0);
        int len = 0;
        for (int i = 1; i < m; ) {
            if (pat[i] == pat[len]) {
                lps[i++] = ++len;
            } else {
                if (len != 0) len = lps[len - 1];
                else lps[i++] = 0;
            }
        }
        return lps;
    }

    vector<int> search(string &pat, string &txt) {
        vector<int> ans;
        int m = pat.size(), n = txt.size();
        vector<int> lps = computeLPS(pat);
        int i = 0, j = 0;
        while (i < n) {
            if (txt[i] == pat[j]) {
                i++; j++;
            }
            if (j == m) {
                ans.push_back(i - j + 1);
                j = lps[j - 1];
            } else if (i < n && txt[i] != pat[j]) {
                if (j != 0) j = lps[j - 1];
                else i++;
            }
        }
        return ans;
    }
};
