You are given an array coins[], where each element represents a coin of a different denomination, and a target value sum. You have an unlimited supply of each coin type {coins1, coins2, ..., coinsm}.

Your task is to determine the minimum number of coins needed to obtain the target sum. If it is not possible to form the sum using the given coins, return -1.




//c++code 

class Solution {
  public:
    int minCoins(vector<int> &coins, int sum) {

    vector<int> dp(sum + 1, INT_MAX);
    dp[0] = 0;
    for (int i = 1; i <= sum; i++) {
        for (int coin : coins) {
            if (i >= coin && dp[i - coin] != INT_MAX) {
                dp[i] = min(dp[i], dp[i - coin] + 1);
            }
        }
    }
    return dp[sum] == INT_MAX ? -1 : dp[sum];
        
    }
};
