
An ordinary Doubly Linked List requires space for two address fields to store the addresses of previous and next nodes. A memory-efficient version of the Doubly Linked List can be created using only one space for the address field with every node. This memory-efficient Doubly Linked List is called XOR Linked List or Memory Efficient as the list uses bit-wise XOR operation to save space for one address.


// c++ code 

struct Node *insert(struct Node *head, int data) {
    
    Node *temp = new Node(data);
    temp->npx = head;
    if(head)head->npx = XOR(temp,head->npx);
    return temp;
}

vector<int> getList(struct Node *head) {
    
    vector<int> ans;
    Node *curr=head,*prev=NULL,*nxt=NULL;
    while(curr){
        ans.push_back(curr->data);
        nxt = XOR(prev,curr->npx);
        prev=curr;
        curr=nxt;
    }
    return ans;
}
