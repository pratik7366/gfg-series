You are given two integer arrays a[] and b[] of equal size. A sum combination is formed by adding one element from a[] and one from b[], using each index pair (i, j) at most once. Return the top k maximum sum combinations, sorted in non-increasing order.





//c++ code 

class Solution {
  public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
     
    int n = a.size();
    sort(a.begin(), a.end());
    sort(b.begin(), b.end());
    priority_queue<pair<int, pair<int, int>>> maxHeap;
    set<pair<int, int>> visited;
    maxHeap.push({a[n - 1] + b[n - 1], {n - 1, n - 1}});
    visited.insert({n - 1, n - 1});
    vector<int> result;

    while (k-- && !maxHeap.empty()) {
        auto top = maxHeap.top();
        maxHeap.pop();
        result.push_back(top.first);
        int i = top.second.first;
        int j = top.second.second;

        if (i > 0 && visited.find({i - 1, j}) == visited.end()) {
            maxHeap.push({a[i - 1] + b[j], {i - 1, j}});
            visited.insert({i - 1, j});
        }

        if (j > 0 && visited.find({i, j - 1}) == visited.end()) {
            maxHeap.push({a[i] + b[j - 1], {i, j - 1}});
            visited.insert({i, j - 1});
        }
    }

    return result;
        
    }
};
