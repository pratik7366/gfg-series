In daily share trading, a trader buys shares and sells them on the same day. If the trader is allowed to make at most 2 transactions in a day, find out the maximum profit that a share trader could have made.

You are given an array prices[] representing stock prices throughout the day. Note that the second transaction can only start after the first one is complete (buy->sell->buy->sell).




//c++ code 

class Solution {
  public:
    int maxProfit(vector<int> &prices) {
    
    if (prices.empty()) return 0;
    
    int n = prices.size();
    vector<int> leftProfit(n, 0); 
    vector<int> rightProfit(n, 0); 
    
    
    int minPrice = prices[0];
    for (int i = 1; i < n; i++) {
        leftProfit[i] = max(leftProfit[i - 1], prices[i] - minPrice);
        minPrice = min(minPrice, prices[i]);
    }
    
   
    int maxPrice = prices[n - 1];
    for (int i = n - 2; i >= 0; i--) {
        rightProfit[i] = max(rightProfit[i + 1], maxPrice - prices[i]);
        maxPrice = max(maxPrice, prices[i]);
    }
    
    
    int maxProfit = 0;
    for (int i = 0; i < n; i++) {
        maxProfit = max(maxProfit, leftProfit[i] + rightProfit[i]);
    }
    
    return maxProfit;
        
    }
};
