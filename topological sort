Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D list of edges[][], where each entry edges[i] = [u, v] denotes an directed edge u -> v. Return topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.




//c++ code

class Solution {
  public:
    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        
    vector<int> inDegree(V, 0);
    vector<vector<int>> adj(V);
    for (auto& e : edges) {
        adj[e[0]].push_back(e[1]);
        inDegree[e[1]]++;
    }

    queue<int> q;
    for (int i = 0; i < V; ++i)
        if (inDegree[i] == 0)
            q.push(i);

    vector<int> topo;
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        topo.push_back(node);
        for (int neighbor : adj[node]) {
            inDegree[neighbor]--;
            if (inDegree[neighbor] == 0)
                q.push(neighbor);
        }
    }

    return topo;
}

bool checkTopoSort(int V, vector<int>& res, vector<vector<int>>& edges) {
    unordered_map<int, int> pos;
    for (int i = 0; i < V; i++)
        pos[res[i]] = i;
    for (auto& e : edges)
        if (pos[e[0]] > pos[e[1]])
            return false;
    return true;
        
    }
};
