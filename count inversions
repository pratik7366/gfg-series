Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 





//c++ code 
class Solution {
  public:
    // Function to count inversions in the array.
    
        int getSum(vector<int>& BIT, int index) {
    int sum = 0;
    while (index > 0) {
        sum += BIT[index];
        index -= index & (-index);
    }
    return sum;
}

void updateBIT(vector<int>& BIT, int index, int value, int n) {
    while (index <= n) {
        BIT[index] += value;
        index += index & (-index);
    }
}

int inversionCount(vector<int>& arr) {
    int n = arr.size();
    vector<int> temp = arr;
    sort(temp.begin(), temp.end());
    for (int i = 0; i < n; i++) {
        arr[i] = lower_bound(temp.begin(), temp.end(), arr[i]) - temp.begin() + 1;
    }
    vector<int> BIT(n + 1, 0);
    int invCount = 0;
    for (int i = n - 1; i >= 0; i--) {
        invCount += getSum(BIT, arr[i] - 1);
        updateBIT(BIT, arr[i], 1, n);
    }
    return invCount;
    }
};
