You are given a lowercase string s, determine the total number of distinct strings that can be formed using the following rules:

Identify all unique vowels (a, e, i, o, u) present in the string.
For each distinct vowel, choose exactly one of its occurrences from s. If a vowel appears multiple times, each occurrence represents a unique selection choice.
Generate all possible permutations of the selected vowels. Each unique arrangement counts as a distinct string.
Return the total number of such distinct strings.




//c++ code 

class Solution {
  public:
    int vowelCount(string& s) {
        
    unordered_map<char, int> freq;
    string vowels = "aeiou";
    for (char ch : s) {
        if (vowels.find(ch) != string::npos) {
            freq[ch]++;
        }
    }

    vector<int> counts;
    for (char v : vowels) {
        if (freq.count(v)) {
            counts.push_back(freq[v]);
        }
    }

    int distinctVowels = counts.size();
    if (distinctVowels == 0) return 0;

    long long ways = 1;
    for (int c : counts) {
        ways *= c;
    }

   
    for (int i = 2; i <= distinctVowels; i++) {
        ways *= i;
    }

    return (int)ways;
    }
};
