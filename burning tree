Given a binary tree and a target node, determine the minimum time required to burn the entire tree if the target node is set on fire. In one second, the fire spreads from a node to its left child, right child, and parent.
Note: The tree contains unique values.




//c++ code 

class Solution {
  public:
    
      void mapParents(Node* root, unordered_map<Node*, Node*>& parentTrack, Node*& targetNode, int target) {
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            Node* curr = q.front();
            q.pop();
            if (curr->data == target) targetNode = curr;
            if (curr->left) {
                parentTrack[curr->left] = curr;
                q.push(curr->left);
            }
            if (curr->right) {
                parentTrack[curr->right] = curr;
                q.push(curr->right);
            }
        }
    }

    int minTime(Node* root, int target) {
        unordered_map<Node*, Node*> parentTrack;
        Node* targetNode = nullptr;
        mapParents(root, parentTrack, targetNode, target);

        unordered_map<Node*, bool> visited;
        queue<Node*> q;
        q.push(targetNode);
        visited[targetNode] = true;
        int time = 0;

        while (!q.empty()) {
            int size = q.size();
            bool anyBurned = false;
            for (int i = 0; i < size; i++) {
                Node* curr = q.front();
                q.pop();
                if (curr->left && !visited[curr->left]) {
                    anyBurned = true;
                    visited[curr->left] = true;
                    q.push(curr->left);
                }
                if (curr->right && !visited[curr->right]) {
                    anyBurned = true;
                    visited[curr->right] = true;
                    q.push(curr->right);
                }
                if (parentTrack[curr] && !visited[parentTrack[curr]]) {
                    anyBurned = true;
                    visited[parentTrack[curr]] = true;
                    q.push(parentTrack[curr]);
                }
            }
            if (anyBurned) time++;
        }
        return time;
    }
};
