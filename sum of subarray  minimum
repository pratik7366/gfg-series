Given an array arr[] of positive integers, find the total sum of the minimum elements of every possible subarrays.

Note: It is guaranteed that the total sum will fit within a 32-bit unsigned integer.





//c++ code 

class Solution {
  public:
    int sumSubMins(vector<int> &arr) {
     
    int n = arr.size();
    vector<int> left(n), right(n);
    stack<int> s1, s2;

    for (int i = 0; i < n; ++i) {
        while (!s1.empty() && arr[s1.top()] > arr[i]) s1.pop();
        left[i] = s1.empty() ? i + 1 : i - s1.top();
        s1.push(i);
    }

    for (int i = n - 1; i >= 0; --i) {
        while (!s2.empty() && arr[s2.top()] >= arr[i]) s2.pop();
        right[i] = s2.empty() ? n - i : s2.top() - i;
        s2.push(i);
    }

    int res = 0;
    for (int i = 0; i < n; ++i)
        res += arr[i] * left[i] * right[i];
    return res;
    }
};
