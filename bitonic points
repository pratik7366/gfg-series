
Given an array of integers arr[] that is first strictly increasing and then maybe strictly decreasing, find the bitonic point, that is the maximum element in the array.
Bitonic Point is a point before which elements are strictly increasing and after which elements are strictly decreasing.

Note: It is guaranteed that the array contains exactly one bitonic point.



//c++ code 

class Solution {
  public:
    int findMaximum(vector<int> &arr) {

        int low = 0, high = arr.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if ((mid == 0 || arr[mid] > arr[mid - 1]) &&
                (mid == arr.size() - 1 || arr[mid] > arr[mid + 1])) {
                return arr[mid]; 
            } else if (arr[mid] < arr[mid + 1]) {
                low = mid + 1; 
            } else {
                high = mid - 1; 
            }
        }
        return -1;
        
    }
};
