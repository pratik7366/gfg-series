Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().




//c++ code 

class Solution {
  public:
    vector<int> maxOfMins(vector<int>& arr) {
        
    int n = arr.size();
    vector<int> left(n), right(n), ans(n, 0);
    stack<int> s;
    
    for (int i = 0; i < n; i++) {
        while (!s.empty() && arr[s.top()] >= arr[i]) s.pop();
        left[i] = s.empty() ? -1 : s.top();
        s.push(i);
    }
    
    while (!s.empty()) s.pop();
    
    for (int i = n - 1; i >= 0; i--) {
        while (!s.empty() && arr[s.top()] >= arr[i]) s.pop();
        right[i] = s.empty() ? n : s.top();
        s.push(i);
    }
    
    for (int i = 0; i < n; i++) {
        int len = right[i] - left[i] - 1;
        ans[len - 1] = max(ans[len - 1], arr[i]);
    }
    
    for (int i = n - 2; i >= 0; i--) ans[i] = max(ans[i], ans[i + 1]);
    
    return ans;
    }
};
