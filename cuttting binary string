Difficulty: MediumAccuracy: 49.71%Submissions: 30K+Points: 4
You are given a binary string s consisting only of characters '0' and '1'. Your task is to split this string into the minimum number of non-empty substrings such that:

Each substring represents a power of 5 in decimal (e.g., 1, 5, 25, 125, ...).
No substring should have leading zeros.
Return the minimum number of such pieces the string can be divided into.
Note: If it is not possible to split the string in this way, return -1.




//c++ code 

class Solution {
  public:
  
       bool isPowerOf5(const string& s) {
    if (s[0] == '0') return false;
    long long num = 0;
    for (char c : s) {
        num = (num << 1) + (c - '0');
    }
    if (num == 0) return false;
    while (num % 5 == 0) num /= 5;
    return num == 1;
}

int cuts(string s) {
    int n = s.length();
    vector<int> dp(n + 1, INT_MAX);
    dp[0] = 0;

    for (int i = 1; i <= n; ++i) {
        for (int j = 0; j < i; ++j) {
            string sub = s.substr(j, i - j);
            if (isPowerOf5(sub) && dp[j] != INT_MAX) {
                dp[i] = min(dp[i], dp[j] + 1);
            }
        }
    }

    return dp[n] == INT_MAX ? -1 : dp[n];
    }
};
